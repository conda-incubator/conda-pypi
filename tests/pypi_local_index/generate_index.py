import hashlib
from pathlib import Path

GLOBAL_INDEX = """
<!-- File autogenerated by generate_index.py. Do not edit manually. -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta name="pypi:repository-version" content="1.4">
    <title>Simple index</title>
  </head>
  <body>
    __LIST_OF_DIRECTORIES__
  </body>
</html>
""".lstrip()

PROJECT_INDEX = """
<!-- File autogenerated by generate_index.py. Do not edit manually. -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta name="pypi:repository-version" content="1.4">
    <meta name="pypi:project-status" content="active">
    <title>Links for __NAME__</title>
  </head>
  <body>
    <h1>Links for __NAME__</h1>
    __LIST_OF_ARTIFACTS__
  </body>
</html>
""".lstrip()

HERE = Path(__file__).parent
GLOBAL_INDEX_PATH = HERE / "index.html"

directories = [d for d in HERE.iterdir() if d.is_dir()]
list_of_directories = "<br />\n".join(
    [f"<a href='{directory.name}/'>{directory.name}</a>" for directory in directories]
)
GLOBAL_INDEX_PATH.write_text(GLOBAL_INDEX.replace("__LIST_OF_DIRECTORIES__", list_of_directories))


def checksum(path, algorithm="sha256", bufsize=1024 * 1024) -> str:
    hasher = hashlib.new(algorithm)
    with open(path, "rb") as f:
        # Use a for loop to iterate over the file in chunks
        for chunk in iter(lambda: f.read(bufsize), b""):
            hasher.update(chunk)
    return hasher.hexdigest()


for directory in directories:
    print(directory)
    artifacts = []
    for path in directory.iterdir():
        if path.name.endswith((".tar.gz", ".whl")) and path.is_file():
            print(path)
            sha = checksum(path, "sha256")
            artifacts.append(
                f'<a href="{path.name}#sha256={sha}" '
                f'data-dist-info-metadata="sha256={sha}" '
                f'data-core-metadata="sha256={sha}">'
                f"{path.name}</a>"
            )
    (HERE / directory / "index.html").write_text(
        PROJECT_INDEX.replace("__NAME__", directory.name).replace(
            "__LIST_OF_ARTIFACTS__", "<br />\n".join(artifacts)
        )
    )
